# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름 
name: Spring Boot & Gradle CI/CD

# Event Trigger
# master branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음 
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'


      - name: Grant execute permission for gradle
        run: chmod +x gradle

#       - name: build docker
#         run: ./gradlew bootBuildImage

#       - name: Build with Gradle
#         run: gradle clean build

#       - uses: actions/checkout@v2
#       - name: Build the Docker image
#         run: docker build --tag docker:1.0 .

      - name: Build with Gradle
        run: ./gradlew build -x test
      - name: Temporarily save build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: build
          retention-days: 1
          
  docker:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: build
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
    steps:
    - uses: actions/checkout@v2
    - name: Retrieve built
      uses: actions/download-artifact@v2
      with:
        name: build-artifact
        path: build
    - name: Docker Hub Sign-in
      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
    - name: Building Docker Image
      run: docker build -t $REPO:latest -t $REPO:${GITHUB_RUN_ID} .
    - name: Publish Docker Image
      run: docker push $REPO
